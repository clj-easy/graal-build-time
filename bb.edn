{:paths ["."]
 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.tasks :as tasks]
             [babashka.process :refer [tokenize]]
             [build-shared :as bs]
             [clojure.string :as str])
  :init
  (do
    (def windows? (str/starts-with? (System/getProperty "os.name")
                                    "Windows"))
    (defn clojure
      "Clojure defaulting to stderr output"
      [arg & args]
      (apply tasks/clojure (str "-J-Dclojure.main.report=stderr " arg) args)))

  clean {:doc "Clean target dir"
         :task (bs/clean {})}

  compile-sources {:doc "Compile sources"
                   :task (when (bs/needs-compile?)
                           (clojure "-T:build compile-sources"))}

  jar {:doc "Build jar"
       :task (when (bs/needs-jar?)
               (clojure "-T:build jar"))}

  install {:doc "Install jar in local maven repo"
           :task (clojure "-T:build install")}

  uber {:doc "Build uberjar for testing"
        :task (when (seq (fs/modified-since bs/uberjar ["deps.edn" "src" "test"]))
                (clojure "-T:build uber"))}

  test {:doc "Runs tests"
        :task (clojure "-X:test")}

  graalvm {:doc "Checks GRAALVM_HOME env var"
           :task
           (let [env (System/getenv "GRAALVM_HOME")]
             (assert env "Set GRAALVM_HOME")
             env)}

  native-image
  {:doc     "Builds native image"
   :depends [graalvm uber]
   :task    (when (seq (fs/modified-since "native-test"
                                          bs/uberjar))
              (shell (str (fs/file graalvm
                                   "bin"
                                   (if windows?
                                     "gu.cmd"
                                     "gu")))
                     "install" "native-image")
              (shell (str (fs/file graalvm
                                   "bin"
                                   (if windows?
                                     "native-image.cmd"
                                     "native-image")))
                     ;; note: we are omitting --initialize-at-build-time
                     "-jar" "target/test.jar"
                     "--no-fallback"
                     "--no-server"
                     "-H:Name=native-test"))}

  native-image-test
  {:doc "Run integration test"
   :depends [native-image]
   :task    (shell (if windows?
                     "./native-test.exe"
                     "./native-test"))}

  bump-version (do (load-file "scripts/bump_version.clj")
                   (shell "git add resources/clj-easy/graal-build-time-version.txt")
                   (shell "git commit -m 'Bump version'")
                   (bs/refresh-version))

  tag (shell (str "git tag v" bs/version))

  publish {:task (do
                   (run 'bump-version)
                   (run 'tag)
                   (shell "git push --atomic origin main"
                          (str "v" bs/version)))}

  current-branch (->> (shell {:out :string} "git rev-parse --abbrev-ref HEAD")
                      :out
                      str/trim)

  can-release {:depends [current-branch]
               :task (= "main" current-branch)}

  deploy {:doc "Deploys to clojars"
          :depends [can-release]
          :task (when can-release
                  (tasks/clojure
                   {:continue true}
                   "-J-Dclojure.main.report=stderr -T:build deploy"))}

  ,}
 ,}
